_rcvSaveTiffImage: func [
	redImage 	[image!] 
	f 			[file!] 
	mode 		[integer!]
][
	str: copy #{}
	; image size
	nx: redImage/size/x ny: redImage/size/y
	nChannels: 3
	nEntries: 15
	baseOffset: nEntries + (nEntries * 12)
	if odd? baseOffset [baseOffset: baseOffset + 1]
	; creates tiff file and file header
	either ( mode = 1)  [write f TIFF_LITTLEENDIAN] 
						[write f TIFF_BIGENDIAN]
	;either (mode = 1) [str: "2a00"] [str: "002a"] 
	;write/binary/append f debase/base str 16
	str: to-hex/size TIFF_VERSION_CLASSIC 4
	if mode = 1 [reverse str]
	write/append f to-binary str
	
	
	; IDF offset
	tagOffset: to-binary nx * ny * nChannels + 8
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset	
	
	;end of header
	
	;Write binary image data
	write/append f to-binary redImage/rgb   
	
	; first and unique IFD
	; The number of directory entries
	str: to-binary to-hex/size nEntries 4
	write/append f str 
	
	; Tag 1: 256: image  width , short int (3)
	either (mode = 1) [str: #{0001030001000000}] [str: #{0100000300000001}]
	write/append f str
	tagOffset: to-binary nx
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	;tag 2: 257: image height  , short int (3)
	either (mode = 1) [str: #{0101030001000000}] [str: {0101000300000001}]
	write/append f str
	tagOffset: to-binary ny
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	
	;Tag 3: 258 Bits per sample tag, short int 
	either (mode = 1) [str: #{0201030003000000}] [str: #{0102000300000003}]
	write/append f str
	tagOffset: to-binary (nx * ny * nChannels) + baseOffset
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	; tag 4: 259: Compression flag, short int : 1 none
	either (mode = 1) [str: #{030103000100000001000000}] [str: #{010300030000000100010000}]
	write/append f str
	
	;Tag 5: 262 ; Photometric interpolation tag, short int: 2 RGB
	either (mode = 1) [str: #{060103000100000002000000}] [str: #{010600030000000100020000}]
	write/append f str
	
	;Tag 6: 273 : Strip offset tag, long int
	either (mode = 1) [str: #{110104000100000008000000}] [str: #{011100040000000100000008}]
	write/append f  str 
	
	;tag 7: 274 Orientation flag, short int 1: Top and Left
	either (mode = 1) [str: #{120103000100000001000000}] [str: #{011200030000000100010000}]
	write/append f str
	
	;Tag 8 277;Sample per pixel tag, short int 3 since RGB Image
	either (mode = 1) [str: #{150103000100000003000000}] [str: #{011500030000000100030000}]
	write/append f str
	
	;Tag 9: 278 Rows per strip tag, short int
	either (mode = 1) [str: #{1601030001000000}] [str: #{1601030001000000}]
	write/append f str
	tagOffset: to-binary ny
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	;Tag 10: 279 Strip byte count flag, long int 
	either (mode = 1) [str: #{1701040001000000}] [str: #{0117000400000001}]
	write/append f str
	tagOffset: to-binary (nx * ny * nChannels)
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	
	; Tag 11: 280 Minimum sample value flag, short int   
	either (mode = 1) [str: #{1801030003000000}] [str: #{0118000300000003}]
	write/append f str
	tagOffset: to-binary (nx * ny * nChannels) + baseOffset + 6 
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	; Tag 12: 281 Max sample value flag, short int   
	either (mode = 1) [str: #{1901030003000000}] [str: #{0119000300000003}]
	write/append f str
	tagOffset: to-binary (nx * ny * nChannels) + baseOffset + 12
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	;Tag 13: 284 ;Planar configuration tag, short int 3
	either (mode = 1) [str: #{1c0103000100000001000000}] [str: #{011c00030000000100010000}]
	write/append f str 
	
	; Tag 14: 305 Sotfware; ascii 2
	either (mode = 1) [str: #{3101020026000000}] [str: #{0131200026000000}]
	write/append f str 
	tagOffset: to-binary (nx * ny * nChannels) +  baseOffset + 22
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset	
	
	
	;Tag 15: 339 Sample format tag, short int
	either (mode = 1) [str: #{5301030003000000}] [str: #{0153000300000003}]
	write/append f str 
	tagOffset: to-binary (nx * ny * nChannels) + baseOffset + 18
	if mode = 1 [reverse tagOffset]
	write/append f tagOffset
	
	;End of the directory entry
	str: #{00000000}
	write/append f str
	
	; now write values addressed by pointers
	;Bits for each colour channel
	either (mode = 1) [str: #{080008000800}] [str: #{000800080008}]
	write/append f str
	;Minimum value for each component
	str: #{000000000000}
	write/append f str
	;Maximum value per channel
	either (mode = 1) [str: #{ff00ff00ff00}] [str: #{00ff00ff00ff}]
	write/append f str
	;Samples per pixel for each channel
	either (mode = 1) [str: #{010001000100}] [str: #{000100010001}]
	write/append f str
	
	; redCV software signature
	str: #{7265644356206C696272617279}
	write/append f str
]




_rcvSaveTiffImage: func [redImage [image!] f [file!] mode [integer!]] [
	; image size
	nx: redImage/size/x 
	ny: redImage/size/y
	nChannels: 3
	nEntries: 14
	;************ creates tiff file and file header ******************
	either ( mode = 1)  [write/binary f TIFF_LITTLEENDIAN] 
						[write/binary f TIFF_BIGENDIAN]
	bin: to-binary to-hex/size TIFF_VERSION_CLASSIC 4 ;-- tiff magic number
	if mode = 1 [reverse bin]
	write/binary/append f bin	
	; offset of the first IFD for a file with 1 RGB image
	_offset: nx * ny * nChannels + 8
	bin: to-binary _offset
	if mode = 1 [reverse bin]
	write/binary/append f bin	
	
	;********************* end of header *****************************

	write/binary/append f redImage/rgb   
	
	; first and unique IFD
	; The number of directory entries
	either (mode = 1) [str: "0e00"] [str: "000e"]	; 14 entries
	bin: to-binary to-hex/size nEntries 4
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	;write/binary/append f debase/base str 16
	
	; Tag 1: 256: image  width , short int (3)
	either (mode = 1) [str: "0001030001000000"] [str: "0100000300000001"]
	write/binary/append f debase/base str 16
	bin: to-binary nx
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	;tag 2: 257: image height  , short int (3)
	either (mode = 1) [str: "0101030001000000"] [str: "0101000300000001"]
	write/binary/append f debase/base str 16
	bin: to-binary ny
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	
	;Tag 3: 258 Bits per sample tag, short int 
	_offset: (nx * ny * nChannels) + 182 
	either (mode = 1) [str: "0201030003000000"] [str: "0102000300000003"]
	write/binary/append f debase/base str 16

	bin: to-binary _offset
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	; tag 4: 259: Compression flag, short int : 1 none
	either (mode = 1) [str: "030103000100000001000000"] [str: "010300030000000100010000"]
	write/binary/append f debase/base str 16
	
	;Tag 5: 262 ; Photometric interpolation tag, short int: 2 RGB
	either (mode = 1) [str: "060103000100000002000000"] [str: "010600030000000100020000"]
	write/binary/append f debase/base str 16
	
	;Tag 6: 273 : Strip offset tag, long int
	either (mode = 1) [str: "110104000100000008000000"] [str: "011100040000000100000008"]
	write/binary/append f debase/base str 16
	
	;tag 7: 274 Orientation flag, short int 1: Top and Left
	either (mode = 1) [str: "120103000100000001000000"] [str: "011200030000000100010000"]
	write/binary/append f debase/base str 16
	
	;Tag 8 277;Sample per pixel tag, short int 3 since RGB Image
	either (mode = 1) [str: "150103000100000003000000"] [str: "011500030000000100030000"]
	write/binary/append f debase/base str 16
	
	;Tag 9: 278 Rows per strip tag, short int
	either (mode = 1) [str: "1601030001000000"] [str: "1601030001000000"]
	write/binary/append f debase/base str 16
	bin: to-binary ny
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	;Tag 10: 279 Strip byte count flag, long int 
	either (mode = 1) [str: "1701040001000000"] [str: "0117000400000001"]
	write/binary/append f debase/base str 16
	bin: to-binary (nx * ny * nChannels)
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	
	; Tag 11: 280 Minimum sample value flag, short int  
	_offset: (nx * ny * nChannels) + 188
	either (mode = 1) [str: "1801030003000000"] [str: "0118000300000003"]
	write/binary/append f debase/base str 16
	bin: to-binary _offset
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	; Tag 12: 281 Max sample value flag, short int  
	_offset: (nx * ny * nChannels) + 194
	either (mode = 1) [str: "1901030003000000"] [str: "0119000300000003"]
	write/binary/append f debase/base str 16
	bin: to-binary _offset
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	;Tag 13: 284 ;Planar configuration tag, short int 3
	either (mode = 1) [str: "1c0103000100000001000000"] [str: "011c00030000000100010000"]
	write/binary/append f debase/base str 16
	
	;Tag 14: 339 Sample format tag, short int
	_offset: (nx * ny * nChannels) + 200
	either (mode = 1) [str: "5301030003000000"] [str: "0153000300000003"]
	write/binary/append f debase/base str 16
	bin: to-binary _offset
	if mode = 1 [reverse bin]
	write/binary/append f bin
	
	;End of the directory entry
	str: "00000000"
	write/binary/append f debase/base str 16
	
	; now write values addressed by pointers
	;Bits for each colour channel
	either (mode = 1) [str: "080008000800"] [str: "000800080008"]
	write/binary/append f debase/base str 16
	;Minimum value for each component
	str: "000000000000"
	write/binary/append f debase/base str 16
	;Maximum value per channel
	either (mode = 1) [str: "ff00ff00ff00"] [str: "00ff00ff00ff"]
	write/binary/append f debase/base str 16
	;Samples per pixel for each channel
	either (mode = 1) [str: "010001000100"] [str: "000100010001"]
	write/binary/append f debase/base str 16
]

	