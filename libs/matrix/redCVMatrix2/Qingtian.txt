
From Qingtian
Thanks. I joined the repo. ðŸ˜Ž

Codes in rcvMatrix2.red looks good. I see very little gain to make it as a native datatype. Most of the predefined actions in native datatype are for series-like datatypes. Those actions are not suitable for matrix!. So I think put it in a context is good enough for now. Something like this:

matrix: context [
    make:        func [...][...]
    header:      func [...][...]
    data:        func [...][...]
    order:       func [...][...]
    trace:       func [...][...]
    diagonal:    func [...][...]
    determinant: func [...][...]
    eigen:       func [...][...]
    square?:     func [...][...]
    zero?:       func [...][...]
    degenerate?: func [...][...]
    invertible?: func [...][...]
    diagonal?:   func [...][...]
    symmetric?:  func [...][...]
    pick:        func [...][...]    ;-- there are some options for the spec of this function
    poke:        func [...][...]
    ;more functions...
]


print "*********** Matrices Creation ******************"
;--some blocks for testing
bc: [#"^@" #"^@" #"^@" #"^@" #"^@" #"^@" #"^@" #"^@" #"^@"] ;--char
bi: [1 2 3 4 5 6 7 8 9]                                     ;--integer
bf: [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0]    ;-float

m1: matrix/make 1 8  3x3 bc
m2: matrix/make 2 16 3x3 bi
m3: matrix/make 3 64 3x4 bf

print ["Mat Order :" matrix/order m1 "as Red pair!"]
print ["Mat header:" matrix/header m1]
print ["Mat values:" matrix/data m1]

;-- option 1
print ["Mat value at 2x2:" matrix/pick m1 2x2]  ;-- 1-based index
print ["Mat row 2: " matrix/pick m1 2x0]        ;-- 1-based index, so we use 0 as none
print ["Mat column 2: " matrix/pick m1 0x2]

;-- option 2
pick: func [mx /row r /column c][...]
print ["Mat value at 2x2:" matrix/pick/row/column m1 2 2]   ;-- 1-based index
print ["Mat row 2: " matrix/pick/row m1 2]
print ["Mat column 2: " matrix/pick/column m1 2]