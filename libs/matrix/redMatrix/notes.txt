notes for Toomas
Red/System uses a byte datatype [0..255] which corresponds to 8-bit unsigned char (uchar) in C or C++
This datatype in unsupported in Red which uses a Char! 8-bit signed char (schar) for [-127 .. 128] values. 
if any operation is producing a result that does not fit the 8 bit-size, the result is  truncated to the 8 bit-size using this formula: value and FFh << 24 >> 24
exemple 255 and FFh << 24 >> 24 => - 1

8-bit matrices are really useful for fast image processing and maybe we can use a virtual byte datatype using this formula: if value < 0 [value: value and 7Fh + 80h]

impossible car toujours un effet 8 bit qui bloque les valeurs > 128

summary
8-bits either char or integer:  [-127 .. 128] 2^8 (256)
16-bits either char or integer: [-65535..65536] 2 ^16 (65536)
32-bits either char or integer: [-2147483648 to 2147483647] 2^32 (4,294,967,294)



The float32! datatype represents an IEEE-754 single precision floating point number.Float32! memory size is 32-bit. 10^38


The float! datatype represents an IEEE-754 double precision floating point number. Float! memory size is 64-bit. 10^308

Microsoft C++
Type	Minimum value	Maximum value
float	1.175494351 E - 38	3.402823466 E + 38
double	2.2250738585072014 E - 308	1.7976931348623158 E + 308

RED	
Preceded by # and within quotes, char! values represent a Unicode code point. They are integer numbers in the range hexadecimal 00 to hexadecimal 10FFFF. (0 to 1,114,111 in decimal.)

Some datatypes are classes of datatypes:
Any of the following datatypes is also a number! datatype: integer!, float!, percent!
And any any of the following datatypes is also
a scalar! datatype: char!, integer!, float!, pair!, percent!, tuple!, time!, date!