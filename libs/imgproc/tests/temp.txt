while [j < rows][
            	i: 0
            	while [i < cols][
            		; OK pixel (-1, -1) will correctly become pixel (w-1, h-1)
            		imx:  (x + (i - (cols / 2)) + w ) % w 
        			imy:  (y + (j - (rows / 2)) + h ) % h 
            		idx: pix1 + (imy * w) + imx  ; corrected pixel index in image
            		idx2: pix1 + (j * w + i + 1); relative pixel according to ES
            		
           			;get kernel values OK 
        			k: as red-integer! kValue
        			switch op [
        				1	[if (k/value = 1) [acc: idx/value AND idx2/value]] ; erosion
        				2	[if (k/value = 1) [acc: idx/value OR idx2/value]]  ; dilatation
        			]
        			kValue: kBase + (j * cols + i + 1)
           			i: i + 1
            	]
            	j: j + 1 
        ]
        
        
        
        Les relations entre (xv,yv), (x,y) et (i,j) sont : xv = x + i â€“ 1 et yv= y + j -1
        
        
        acc: 0
        	kValue: kBase
        	j: 0
        	while [j < rows][
        		i: 0
        		while [i < cols][
        			; OK pixel (-1, -1) will correctly become pixel (w-1, h-1)
            		imx:  (x + (i - (cols / 2)) + w ) % w 
        			imy:  (y + (j - (rows / 2)) + h ) % h 
            		idx: pix1 + (imy * w) + imx  ; corrected pixel index in image
        			i: i + 1
        		]
        		j: j + 1
        	]
        	
        	