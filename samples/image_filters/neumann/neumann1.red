Red [	Title:   "Neumann Filter "	Author:  "Francois Jouen"	File: 	 %Neumann1.red	Needs:	 'View]; last Red Master required!#include %../../../libs/redcv.red ; for redCV functionsmargins: 10x10defSize: 512x512img1: rcvCreateImage defSizedst1:  rcvCreateImage defSizedst2:  rcvCreateImage defSizecurrentImage:  rcvCreateImage defSizegray: rcvCreateImage defSizeisFile: falseloadImage: does [    isFile: false	canvas1/image/rgb: black	canvas2/image/rgb: black	tmp: request-file	if not none? tmp [		fileName: to string! to-file tmp		win/text: copy "Edges detection: Neumann "		append win/text fileName		img1: rcvLoadImage tmp		gray: rcvLoadImage/grayscale tmp		currentImage rcvCreateImage img1/size		either cb/data [currentImage: rcvCloneImage gray]					   [currentImage: rcvCloneImage img1]		dst1:  rcvCloneImage currentImage		dst2:  rcvCloneImage currentImage		bb/image: img1		canvas1/image: dst1		canvas2/image: dst2		isFile: true		r1/data: true		r2/data: false		r3/data: false	]]; ***************** Test Program ****************************view win: layout [		title "Edges detection: Neumann gradient and divergence"		origin margins space margins		button 60 "Load" 		[loadImage]			cb: check "Grayscale" 	[either cb/data [currentImage: rcvCloneImage gray]					   			[currentImage: rcvCloneImage img1]					   			_rcvCopy currentImage dst1 _rcvCopy currentImage dst2					   			r1/data: true								r2/data: false								r3/data: false					   			]			button 60 "Quit" 		[rcvReleaseImage img1 								rcvReleaseImage gray								rcvReleaseImage currentImage								rcvReleaseImage dst1								rcvReleaseImage dst2								Quit]		return		bb: base 128x128 img1 		r1: radio "No filter"  [_rcvCopy currentImage dst1 _rcvCopy currentImage dst2]		r2: radio "Gradient"   [rcvGradNeumann currentImage dst1 dst2]		r3: radio "Divergence" [rcvDivNeumann currentImage dst1 dst2] 		return		text 250 "derivative along the x axis"		text 250 "derivative along the y axis"		return		canvas1: base 256x256 dst1		canvas2: base 256x256 dst2			do [r1/data: true]]